{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","item","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNA4BeA,EAzBH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,WACXC,EAASF,EAAMG,OACjBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QACF,WACIR,EAAWI,EAAKG,MAErBH,EAAKK,UAKpB,uBAAGJ,UAAU,UAAb,2BAEJ,OACI,yBAAKA,UAAU,oBACVJ,ICeES,E,2MA/BXC,MAAQ,CACJF,KAAM,I,EAGVG,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,KAAMI,EAAEE,OAAOC,S,EAKvBC,aAAa,SAACJ,GACVA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVL,KAAM,M,wEAIV,OACI,6BACI,0BAAMY,SAAUC,KAAKL,cACjB,8DACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAAOM,KAAKX,MAAMF,a,GAzBhEgB,aC4CPC,E,2MAxCff,MAAM,CACJZ,MAAM,CACJ,CAACQ,GAAG,EAAEE,KAAK,iDACX,CAACF,GAAG,EAAEE,KAAM,eACZ,CAACF,GAAG,EAAEE,KAAM,c,EAIhBT,WAAW,SAACO,GACZ,IAAMR,EAAM,EAAKY,MAAMZ,MAAM4B,QAAO,SAAAvB,GAClC,OAAOA,EAAKG,KAAKA,KAEnB,EAAKO,SAAS,CACZf,W,EAIFqB,QAAQ,SAAChB,GACTA,EAAKG,GAAGqB,KAAKC,SACb,IAAI9B,EAAM,GAAD,mBAAK,EAAKY,MAAMZ,OAAhB,CAAsBK,IAC/B,EAAKU,SAAS,CACZf,W,wEAIA,OACE,yBAAKM,UAAU,sBACb,wBAAIA,UAAU,oBAAd,0BACA,kBAAC,EAAD,CACAN,MAAOuB,KAAKX,MAAMZ,MAClBC,WAAYsB,KAAKtB,aAIjB,kBAAC,EAAD,CAASoB,QAASE,KAAKF,e,GAnCXK,aCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.820a0568.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Todos=({todos, deleteTodo})=>{\r\n    const todoList=todos.length?(\r\n        todos.map(todo=>{\r\n            return(\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span onClick={\r\n                        ()=>{\r\n                            deleteTodo(todo.id)\r\n                        }\r\n                    }>{todo.item}</span>\r\n                </div>\r\n            )\r\n        })\r\n    ):(\r\n        <p className=\"center\">All Tasks Completed !!!</p>\r\n    );\r\n    return(\r\n        <div className=\"todos collection\">\r\n            {todoList}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos;","import React, { Component } from \"react\";\r\n\r\n\r\nclass AddTodo extends Component {\r\n\r\n    state = {\r\n        item: ''\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            item: e.target.value\r\n\r\n        })\r\n    }\r\n\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            item: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Add New Tasks For The Day: </label>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.item} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\n\n\nclass App extends Component {\nstate={\n  todos:[\n    {id:1,item:'Buy Chocolates Using Ralph\\'s Amazon Gift Card'},\n    {id:2,item: 'Learn React'},\n    {id:3,item: 'Exercise'}\n\n  ]\n}\ndeleteTodo=(id)=>{\nconst todos=this.state.todos.filter(todo=>{\n  return todo.id!==id\n});\nthis.setState({\n  todos\n})\n}\n\naddTodo=(todo)=>{\ntodo.id=Math.random();\nlet todos=[...this.state.todos,todo];\nthis.setState({\n  todos\n})\n}\n  render(){\n  return (\n    <div className=\"todo-app container\">\n      <h1 className=\"center blue-text\">Your Tasks For The Day</h1>\n      <Todos \n      todos={this.state.todos}\n      deleteTodo={this.deleteTodo}\n      \n      />\n\n      <AddTodo addTodo={this.addTodo}/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}